package test;

import java.util.HashMap;
import java.util.Map;


public class Flight extends ValidateRequest{

	private String flightArrival, flightDeparture, flightNumber = null;
	Map<String, SeatCategory> categorySeatmapper = new HashMap<String, SeatCategory>();

	public Flight(String flightNumber, String flightArrival, String flightDeparture) {
		this.flightNumber = flightNumber;
		this.flightArrival = flightArrival;
		this.flightDeparture = flightDeparture;
	}

	public void storeCategoryDetails(String category, String flightAvailableSeats, String flightPrice) {
		int availableSeats = Integer.parseInt(flightAvailableSeats);
		double price = Double.parseDouble(flightPrice);
		SeatCategory seatCategory = new SeatCategory(availableSeats, price);
		categorySeatmapper.put(category, seatCategory);
	}
	
	public void setFlightNumber(String flightNumber) {
		flightNumber = this.flightNumber;
	}

	public String getFlightNumber() {
		return flightNumber;
	}

	public void setFlightArrival(String arrival) {
		flightArrival = arrival;
	}
	
	public String getFlightArrival() {
		return this.flightArrival;
	}

	public void setFlightDeparture(String departure) {
		flightDeparture = departure;
	}
	
	public String getFlightDeparture() {
		return this.flightDeparture;
	}
	
	public void setAvaliableSeats(String category, int avaliableSeats) {
		categorySeatmapper.get(category).setAvaliableSeats(avaliableSeats);
	}
	
	public int getAvaliableSeats(String category) {
		return categorySeatmapper.get(category).getAvaliableSeats();
	}
	
	public void setFlightPrice(String category, double flightPrice) {
		categorySeatmapper.get(category).setFlightPrice(flightPrice);
	}
	
	public double getFlightPrice(String category) {
		return categorySeatmapper.get(category).getFlightPrice();
	}
	
	public boolean isSeatCategoryExsist(String category) {
		return categorySeatmapper.containsKey(category);
	}

	@Override
	public void validateRequest(Data data) {
		if (data.seatCategory != null && isSeatCategoryExsist(data.seatCategory)) {
			setNextRequest(categorySeatmapper.get(data.seatCategory));
			this.nextRequest.validateRequest(data);	
		} else {
			
		}
	}
	
}
